{"version":3,"sources":["components/Section/Section.js","components/feedback/feedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedBackOptions","options","onLeaveFeedback","map","option","className","type","onClick","slice","toUpperCase","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","Object","keys","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAWeA,EATC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCWUC,G,MAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEC,UAAU,cAEVC,KAAK,SACLC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,EAAOI,MAAM,EAAG,GAAGC,cAAgBL,EAAOI,MAAM,IAJ5CJ,UCcEM,G,MAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qBAAIV,UAAU,kBAAd,UACE,wCAAWM,EAAX,OACA,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,YCPWC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC2D3BC,G,kNApDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPX,gBAAkB,SAAAE,GAChB,EAAKgB,UAAS,SAAAC,GAAS,sBACpBjB,EAASiB,EAAUjB,GAAU,O,EAGlCkB,mBAAqB,WAAO,IAAD,EACM,EAAKH,MACpC,OAFyB,EACjBR,KADiB,EACXC,QADW,EACFC,K,EAIzBU,gCAAkC,WAAO,IAC/BZ,EAAS,EAAKQ,MAAdR,KACFG,EAAQ,EAAKQ,qBACnB,OAAOR,GAAUH,EAAOG,EAAS,KAAKU,QAAQ,GAAK,G,uDAG3C,IAAD,EACwBC,KAAKN,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBZ,EAAUyB,OAAOC,KAAKF,KAAKN,OAC3BL,EAAQW,KAAKH,qBACbP,EAAqBU,KAAKF,kCAChC,OACE,sBAAKlB,UAAU,YAAf,UACE,cAAC,EAAD,CAASP,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAASA,EACTC,gBAAiBuB,KAAKvB,oBAG1B,cAAC,EAAD,CAASJ,MAAM,aAAf,SACa,IAAVgB,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcE,QAAQ,yB,GA9ChBW,IAAMC,YCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ccd95610.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Section;\r\n","import './feedback.css';\r\nconst FeedBackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div>\r\n    {options.map(option => (\r\n      <button\r\n        className=\"item_button\"\r\n        key={option}\r\n        type=\"button\"\r\n        onClick={() => onLeaveFeedback(option)}\r\n      >\r\n        {option.slice(0, 1).toUpperCase() + option.slice(1)}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default FeedBackOptions;\r\n","import PropTypes from 'prop-types';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul className=\"item_statistics\">\r\n    <li>Good: {good} </li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n    <li>Total: {total}</li>\r\n    <li>Positive feedback: {positivePercentage}%</li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\nexport default Statistics;\r\n","const Notification = ({ message }) => <p>{message}</p>;\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport Section from './components/Section';\r\nimport FeedbackOptions from './components/feedback';\r\nimport Statistics from './components/Statistics';\r\nimport Notification from './components/Notification';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onLeaveFeedback = option => {\r\n    this.setState(prevState => ({\r\n      [option]: prevState[option] + 1,\r\n    }));\r\n  };\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    return total ? ((good / total) * 100).toFixed(0) : 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const options = Object.keys(this.state);\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage();\r\n    return (\r\n      <div className=\"container\">\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={options}\r\n            onLeaveFeedback={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {total !== 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positivePercentage={positivePercentage}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}